pipeline {
    agent any
    triggers {
        githubPush()
    }
    environment {
        GITHUB_CREDENTIALS_ID = 'GH_CRED'
        GITHUB_REPO_OWNER = 'cyse7125-su24-team11'
<<<<<<< HEAD
        GITHUB_REPO_NAME = 'webapp-cve-operator'
=======
        GITHUB_REPO_NAME = 'cve-operator'
>>>>>>> 872c38045c6198468fa2b6d64ae638b9f4518426
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    changelog: false,
                    credentialsId: 'GH_CRED',
                    poll: false,
<<<<<<< HEAD
                    url: 'https://github.com/cyse7125-su24-team11/webapp-cve-operator.git'
=======
                    url: 'https://github.com/cyse7125-su24-team11/cve-operator.git'
>>>>>>> 872c38045c6198468fa2b6d64ae638b9f4518426
            }
        }
        stage('PR') {
            steps {
                withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                    script{
                        def prCommitSHA = sh(script: "git ls-remote https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}.git refs/pull/${env.CHANGE_ID}/head | cut -f1", returnStdout: true).trim()
                        echo "PR Commit SHA: ${prCommitSHA}"
                        env.PR_COMMIT_SHA = prCommitSHA
                    }
                }
            }
        }
        stage('Docker') {
            steps {
<<<<<<< HEAD
                withCredentials([usernamePassword(credentialsId: 'DOCKER_CRED', usernameVariable: 'myuser', passwordVariable: 'docker_password'),
                usernamePassword(credentialsId: 'PG_CRED', usernameVariable: 'dbuser', passwordVariable: 'dbpassword')]) 
=======
                withCredentials([usernamePassword(credentialsId: 'DOCKER_CRED', usernameVariable: 'myuser', passwordVariable: 'docker_password')]) 
>>>>>>> 872c38045c6198468fa2b6d64ae638b9f4518426
                {
                script {
                    try {
                        sh '''
                        docker login -u ${myuser} -p ${docker_password}
                        docker run --privileged --rm tonistiigi/binfmt --install all
                        
                        docker buildx build -f ./Dockerfile -t maheshpoojaryneu/csye7125:operator-v1.0.0 --platform "linux/arm64,linux/amd64" .
                        '''
                    } catch (Exception e) {
                        throw e
                    }
                }
                }
            }    
        }
        stage('Semantic Release and Update Chart Version') {
            steps {
                withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'GH_USERNAME', passwordVariable: 'GH_TOKEN')]) 
                {
                    withEnv(["GH_TOKEN=${GH_TOKEN}"]){
                        script {
                            def releaseOutput = sh(script: 'npx semantic-release --dry-run --json', returnStdout: true).trim()
                            echo "releaseOutput ${releaseOutput}"
                            def versionLine = releaseOutput.find(/Published release (\d+\.\d+\.\d+) on default channel/)
     
                            if (versionLine) {
                                // Extract the new version
                                def newVersion = (versionLine =~ /(\d+\.\d+\.\d+)/)[0][0]
                                echo "New version: v${newVersion}"
    
                                sh '''           
<<<<<<< HEAD
                                docker push maheshpoojaryneu/csye7125:operator-'''+newVersion+'''
=======
                                docker push maheshpoojaryneu/csye7125:operator-'''+newVersion
>>>>>>> 872c38045c6198468fa2b6d64ae638b9f4518426
                            } else {
                                error "Failed to capture the new version from semantic-release."
                            }
                        }
                    }
                }
            }
        }
    }
}